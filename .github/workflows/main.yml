name: CI/CD

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

##

  build-test-and-Infersharp:
    runs-on: ubuntu-18.04
    
    steps: 
      - uses: actions/checkout@v2
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'
          
      - name: Build with dotnet on ubuntu
        run: dotnet build EvilTwitter/ 
      - name: Run tests
        run: dotnet test EvilTwitter/ --configuration Release
        
      - name: Run Infer# on server
        uses: microsoft/infersharpaction@v1.0
        id: runinfersharp
        with:
          binary-path: 'EvilTwitter/EvilClient/bin/Debug/net5.0/'
        
      - name: Run Infer# on DB
        uses: microsoft/infersharpaction@v1.0
        id: runinfersharp1
        with:
          binary-path: 'EvilTwitter/EvilAPI/bin/Debug/net5.0/'
 
          
      - name: Infer# analysis results
        run: echo "${{ steps.runinfersharp.outputs.results }}"
    
# ##        

  build-and-SonarCloud:
    runs-on: ${{ matrix.os }}
    strategy: 
      matrix:
        os: [windows-latest]
      
    
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.102'
          
      - name: Install dependencies
        run: dotnet build EvilTwitter/
        
      - name: Beggining sonarcloud setup - Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"gustavjohansen98_E-vil-Corp" /o:"evilcorp" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build EvilTwitter/ --configuration Release
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
  
  
  ####
  
  deploy:
    needs: [build-and-test, static-code-analysis-on-ubuntu-finding-leaks] # make sure we build and test before we actually deploy 
    
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v1 # checks from main branch
      
      - name: Copy file via scp
        uses: appleboy/scp-action@master # for copying the repo to remote host on digitalocean
        env:
          HOST: ${{secrets.SSH_DB_IP}} # droplet public ip (stored in secrets)
          USERNAME: ${{ secrets.SSH_DB_USERNAME }} # droplet username (root for now)
          KEY: ${{secrets.SSH_DB_KEY}} # private ssh key generated on remote host 
        with:
          source: "." # this repo
          target: "repo/" # copies the repo to the test folder on remote machine 
    
      - name: Execute minitwit on droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.SSH_DB_IP}} # ip addres of the server
          key: ${{secrets.SSH_DB_KEY}}
          username: ${{ secrets.SSH_DB_USERNAME }}
          
          # Spins up both app, server, Prometheus and Grafana
          script: |
            fuser -k -n tcp 5000
            sleep 5s
            cd repo/EvilTwitter/EvilAPI/
            sleep 4s
            nohup pwsh -Command ./swarm-ver-deploy.ps1 > foo.out 2> foo.err < /dev/null &
            sleep 15s
            cd && cd repo/
            nohup dotnet run --project EvilTwitter/EvilClient >> foo.out 2>> foo.err < /dev/null &
            sleep 10s
            nohup docker-compose up >> foo.out 2>> foo.err < /dev/null &
            sleep 10s
